#!/bin/bash

set -e

MAX_RETRIES=5
SLEEP_TIME=5

############################################
# Extragem IP-urile instan»õelor EC2 (cu retry)
############################################
attempt=0
INSTANCE_IPS=""
while [[ -z "$INSTANCE_IPS" && $attempt -lt $MAX_RETRIES ]]; do
  echo "üîé √éncercare $((attempt + 1))/$MAX_RETRIES: Preiau IP-urile instan»õelor EC2..."
  INSTANCE_IPS=$(aws ec2 describe-instances --filters "Name=tag:eks:cluster-name,Values=main-eks-cluster" --query "Reservations[].Instances[].PrivateIpAddress" --output text | tr -d '\n' | tr -s ' ')
  
  if [[ -z "$INSTANCE_IPS" ]]; then
    echo "‚ö†Ô∏è Nu s-au gƒÉsit IP-uri pentru instan»õele EC2. Retry √Æn $SLEEP_TIME secunde..."
    sleep $SLEEP_TIME
    attempt=$((attempt + 1))
  fi
done

if [[ -z "$INSTANCE_IPS" ]]; then
  echo "‚ùå Eroare: Nu s-au gƒÉsit IP-uri dupƒÉ $MAX_RETRIES √ÆncercƒÉri."
  exit 1
fi

############################################
# Scriem √Æn fi»ôier IP-urile instan»õelor
############################################
PARAMS_FILE="../../params.txt"
echo "### Jenkins Instances ###" >> "$PARAMS_FILE"
for IP in $INSTANCE_IPS; do
  echo "INSTANCE_IP=$IP" >> "$PARAMS_FILE"
done
echo "########################" >> "$PARAMS_FILE"

############################################
# Actualizare config cluster EKS (cu retry)
############################################
attempt=0
while [[ $attempt -lt $MAX_RETRIES ]]; do
  echo "üîß Actualizez config cluster EKS (√Æncercare $((attempt + 1)))"
  if aws eks --region eu-west-1 update-kubeconfig --name main-eks-cluster; then
    echo "‚úÖ Config cluster actualizatƒÉ"
    break
  else
    echo "‚ö†Ô∏è Eroare actualizare cluster. Retry √Æn $SLEEP_TIME secunde..."
    sleep $SLEEP_TIME
    attempt=$((attempt + 1))
  fi
done

if [[ $attempt -eq $MAX_RETRIES ]]; then
  echo "‚ùå Eroare: Config cluster EKS nu a putut fi actualizatƒÉ."
  exit 1
fi

############################################
# Creez namespace (cu retry)
############################################
attempt=0
while [[ $attempt -lt $MAX_RETRIES ]]; do
  echo "üîß Creez namespace (√Æncercare $((attempt + 1)))"
  if kubectl apply -f namespace.yaml; then
    echo "‚úÖ Namespace creat"
    break
  else
    echo "‚ö†Ô∏è Eroare creare namespace. Retry √Æn $SLEEP_TIME secunde..."
    sleep $SLEEP_TIME
    attempt=$((attempt + 1))
  fi
done

if [[ $attempt -eq $MAX_RETRIES ]]; then
  echo "‚ùå Eroare: Namespace nu a putut fi creat dupƒÉ $MAX_RETRIES √ÆncercƒÉri."
  exit 1
fi

############################################
# Creez IngressClass (cu retry)
############################################
attempt=0
while [[ $attempt -lt $MAX_RETRIES ]]; do
  echo "üîß Creez IngressClass (√Æncercare $((attempt + 1)))"
  if kubectl apply -f ingressclass.yaml; then
    echo "‚úÖ IngressClass creat"
    break
  else
    echo "‚ö†Ô∏è Eroare creare IngressClass. Retry √Æn $SLEEP_TIME secunde..."
    sleep $SLEEP_TIME
    attempt=$((attempt + 1))
  fi
done

if [[ $attempt -eq $MAX_RETRIES ]]; then
  echo "‚ùå Eroare: IngressClass nu a putut fi creat dupƒÉ $MAX_RETRIES √ÆncercƒÉri."
  exit 1
fi

############################################
# Creez Ingress (cu retry)
############################################
attempt=0
while [[ $attempt -lt $MAX_RETRIES ]]; do
  echo "üîß Creez Ingress (√Æncercare $((attempt + 1)))"
  if kubectl apply -f ingress.yaml; then
    echo "‚úÖ Ingress creat"
    break
  else
    echo "‚ö†Ô∏è Eroare creare Ingress. Retry √Æn $SLEEP_TIME secunde..."
    sleep $SLEEP_TIME
    attempt=$((attempt + 1))
  fi
done

if [[ $attempt -eq $MAX_RETRIES ]]; then
  echo "‚ùå Eroare: Ingress nu a putut fi creat dupƒÉ $MAX_RETRIES √ÆncercƒÉri."
  exit 1
fi

############################################
# Deploy Jenkins (cu retry)
############################################
attempt=0
while [[ $attempt -lt $MAX_RETRIES ]]; do
  echo "üöÄ Fac deploy de Jenkins (√Æncercare $((attempt + 1)))"
  if kubectl apply -f jenkins-app.yaml; then
    echo "‚úÖ Jenkins a fost deployat"
    break
  else
    echo "‚ö†Ô∏è Eroare deploy Jenkins. Retry √Æn $SLEEP_TIME secunde..."
    sleep $SLEEP_TIME
    attempt=$((attempt + 1))
  fi
done

if [[ $attempt -eq $MAX_RETRIES ]]; then
  echo "‚ùå Eroare: Jenkins nu a putut fi deployat dupƒÉ $MAX_RETRIES √ÆncercƒÉri."
  exit 1
fi

############################################
# √énregistrare target-uri √Æn LB (cu retry)
############################################
attempt=0
TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --query 'TargetGroups[?TargetGroupName==`jenkins-tg`].TargetGroupArn' --output text)

while [[ $attempt -lt $MAX_RETRIES ]]; do
  echo "üîß √énregistrez target-uri √Æn LB (√Æncercare $((attempt + 1)))"
  TARGETS=$(echo $POD_IPS | xargs -n 1 -I {} echo "Id={}")
  
  if aws elbv2 register-targets --target-group-arn $TARGET_GROUP_ARN --targets $TARGETS; then
    echo "‚úÖ Target-uri √Ænregistrate √Æn LB"
    break
  else
    echo "‚ö†Ô∏è Eroare √Ænregistrare target-uri. Retry √Æn $SLEEP_TIME secunde..."
    sleep $SLEEP_TIME
    attempt=$((attempt + 1))
  fi
done

if [[ $attempt -eq $MAX_RETRIES ]]; then
  echo "‚ùå Eroare: √énregistrarea target-urilor √Æn LB a e»ôuat dupƒÉ $MAX_RETRIES √ÆncercƒÉri."
  exit 1
fi
