# ✅ Retrieve GitHub Repo URL from Secrets Manager
- name: Retrieve GitHub Repo URL from Secrets Manager
  shell: >
    aws secretsmanager get-secret-value --secret-id github_repo_url --query SecretString --output text | jq -r '.GH_REPO_URL'
  register: github_repo_url
  failed_when: github_repo_url.stdout == ""

- name: Curățăm URL-ul GitHub
  set_fact:
    clean_github_repo_url: "{{ github_repo_url.stdout | trim }}"

# ✅ Retrieve GitHub Username from Secrets Manager
- name: Retrieve GitHub Username from Secrets Manager
  shell: >
    aws secretsmanager get-secret-value --secret-id github_user --query SecretString --output text | jq -r '.GH_USER'
  register: github_user
  failed_when: github_user.stdout == ""

# ✅ Retrieve GitHub Token from Secrets Manager
- name: Retrieve GitHub Token from Secrets Manager
  shell: >
    aws secretsmanager get-secret-value --secret-id github_token --query SecretString --output text | jq -r '.GH_TOKEN'
  register: github_token
  failed_when: github_token.stdout == ""

# ✅ Setăm DNS-ul Jenkins ALB din Route 53
- name: Setăm DNS-ul Jenkins ALB din Route 53
  set_fact:
    jenkins_url: "https://jenkins.k8s.it.com"

# ✅ Obținem parola Jenkins din Kubernetes
- name: Obține parola Jenkins din Kubernetes
  shell: >
    kubectl get secret jenkins -n jenkins -o jsonpath='{.data.jenkins-admin-password}' | base64 --decode
  register: jenkins_password
 
# ✅ Creează secret în Kubernetes
- name: Create Kubernetes secret for GitHub credentials
  shell: >
    kubectl create secret generic secret-credentials \
      --from-literal=github-username="{{ github_user.stdout }}" \
      --from-literal=github-password="{{ github_token.stdout }}" \
      -n jenkins --dry-run=client -o yaml | kubectl apply -f -

# ✅ Verifică dacă secretul există
- name: Check if Kubernetes secret exists
  shell: >
    kubectl get secret secret-credentials -n jenkins -o jsonpath='{.data}'
  register: secret_check
  failed_when: secret_check.stdout == ""
  changed_when: false

- name: Set executable permissions on target.sh
  command: chmod +x ./target.sh
  args:
    chdir: "{{ app_dir }}"

- name: Run target.sh script to deploy Jenkins
  command: "./target.sh"
  args:
    chdir: "{{ app_dir }}"

- name: Verify Jenkins is accessible
  command: "kubectl get ingress -n jenkins"
  register: ingress_status
  failed_when: "'jenkins' not in ingress_status.stdout"

- name: Get Route53 hosted zone ID
  command: aws route53 list-hosted-zones-by-name --dns-name "{{ dns_domain }}." --query "HostedZones[0].Id" --output text
  register: hosted_zone_id
  failed_when: hosted_zone_id.stdout == ""

- name: Get Route53 record for Jenkins
  command: aws route53 list-resource-record-sets --hosted-zone-id {{ hosted_zone_id.stdout }} --query "ResourceRecordSets[?Name=='{{ jenkins_dns }}.']" --output json
  register: dns_record

- name: Fail if Jenkins DNS record is not found
  fail:
    msg: "Jenkins DNS record {{ jenkins_dns }} not found in Route53!"
  when: dns_record.stdout == "[]"
